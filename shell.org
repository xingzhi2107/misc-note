#+TITLE: Shell琐碎笔记

* alias相关
** 定义alias
通过 =alias= 命令来定义一个alias。例如：

#+BEGIN_SRC bash
$ alias git-pull='git pull'
#+END_SRC

** 显示alias
显示所有的alias：

#+BEGIN_SRC bash
$ alias
alias xxx='xf sd'
alias yyy='sdf sdf'
...
#+END_SRC

显示某个alias：

#+BEGIN_SRC bash
  $ alias git-pull
  alias git-pull='git pull'
#+END_SRC

** 移除alias
使用 =unalias= 命令来移除一个alias。例如：

#+BEGIN_SRC bash
$ unalias git-pull
#+END_SRC

** 禁用alias
因为alias的魔力，会让坏人做出这样的事情来：

#+NAME: 可怕的alias
#+BEGIN_SRC bash
  $ alias ls='sudo rm -rf xxx' 	# 如果xxx是 '/'，那后果不敢想象
#+END_SRC

所以，在安全性要求高的环境里，应该避免执行任何一个alias！避免的方式有：

1. 使用命令的完整路径。
   例如执行 =ls= 的时候输入 =/bin/ls=

2. 使用一些安全“命令”。
   使用命令的完整路径其实是比较繁琐的。这时候可以使用一些安全命令。以下几种方式都是运行安全命令的方式：

#+BEGIN_SRC bash
$ command ls
$ \ls
$ 'ls'
$ "ls"
#+END_SRC

3. 登录环境后unalias掉所有的alias。
   可以写一个脚本来逐个 =unalias= 掉所有的alias。但是这并不能完全保证禁用alias。可能再你unalias掉所有
   的alias之后，执行的某个脚本里又定义了一堆邪恶的alias  

* 环境变量相关
** 设置环境变量
可以通过 =export= 命令来设置环境变量

#+BEGIN_SRC bash
$ export MY_NAME="hehe"
#+END_SRC

** 显示所有环境变量
同样是通过 =export= 命令来显示环境变量

#+BEGIN_SRC bash
$ export
declare -x GPG_TTY="/dev/ttys000"
declare -x HOME="/Users/mistkafka"
... ...
#+END_SRC

** 移除环境变量
可以通过 =unset= 命令来移除环境变量

#+BEGIN_SRC bash
$ unset MY_NAME
#+END_SRC

** set、env、export的区别
TODO: http://hackjutsu.com/2016/08/04/Difference%20between%20set,%20export%20and%20env%20in%20bash/

* grep小技巧
** 高亮关键字，但不过滤没有关键字的行
   经常需要在一段文本里找到某个关键字，然后再查看关键字上下的文本。虽然-C参数能一定程度满足，但是有时候就是不想要有过滤效果。
   解决方案，来自[[https://unix.stackexchange.com/questions/106565/how-to-highlight-a-word-in-the-output-of-cat][Stackoverflow]]

   #+begin_src shell
> grep -E --color=auto 'word|$' file
   #+end_src

*** 例子
    #+begin_src shell
 # 筛选出5870911的grep grant_premium_sale，然后再对newcomer0进行高亮
 > cat bryo-log.log | grep grant_premium_sale | grep 5870911 | grep -E --color=auto 'newcomer0|$'

    #+end_src

*** 命令结构解析
* 命令行工具开发
** 补全生成工具 -- [[https://github.com/DannyBen/completely][completely]]
   足够简单，大部分情况下够用。以后有机会可以试试动态补全的功能。
* 进度条原理
tty的前身，电传打印机“换行”的时候，需要两个操作：
  1. 回到行首 即 \r
  2. 换到下一行 即 \n

也就是说， ~\r\n~ 才是表示我们现在一般意义下的换行。但是因为当时硬盘存储资源比较宝贵，而且基本不存在只换行而不回到行首的需求。
所以Unix-like系统体系，在 =存储文本= 的时候就用 ~\n~ 来等价于原本的 ~\r\n~，windows系统则保持原有的表示方式不变。

但是 ~\r~ 的含义依然是存在的，现在的屏幕tty设备，如果已经输出一些文本，然后再出回到行首（即遇到 ~\r~），那么后续输出的内容就
会覆盖之前这一行输出的内容。这个就是shell下实现进度条的原理。

示例：
#+begin_src bash
  #!/bin/bash

  echo -ne '#####                     (33%)\r' # -n表示echo不会自动输出\n，-e表示输出转义字符的本来含义
  sleep 1
  echo -ne '#############             (66%)\r'
  sleep 1
  echo -ne '#######################   (100%)\r'
  echo -ne '\n'
#+end_src
* PS系列环境变量
  暂时找不到对应的文档信息，猜测PS指的是 =prompt string= 的缩写。PS系列环境变量指的是：
  - PS1 :: 控制命令行提示符的字符串样式
  - PS2 :: 控制命令行多行输入的分行样式
  - PS3 :: 控制sh的select命令的选择样式
  - PS4 :: debug脚本的track样式

  更详细的见[[https://www.thegeekstuff.com/2008/09/bash-shell-take-control-of-ps1-ps2-ps3-ps4-and-prompt_command/][这篇]]博客。不过实际上比较有用的，也就PS1环境变量
* 补全
* 美化输出样式
