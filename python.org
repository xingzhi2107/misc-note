#+TITLE: python

* subprocess.call无法运行“cd”
  https://stackoverflow.com/questions/21406887/subprocess-changing-directory

* python执行shell命令
  虽说最方便的是 =os.system= ，但是它却不好控制stdin, stdout, stderror。所以python官方给出了 =subprocess= 模块。
  subprocess也有分好几个命令。但是，一般 =subprocess.run= 就能处理大部分情况。

  下面给个简单的example:

  #+BEGIN_SRC python
    import subprocess

    result = subprocess.run(
        "git tag --list",           # 命令
        shell=True,                 # 执行shell
        capture_output=True,        # 捕获输出，这样在result里获得stdout, stderror。否则，默认直接输出在屏幕中
        encoding='utf8'             # output编码，否则默认是二进制
        )

    result.stdout                   # str
    result.stderror                 # str
    result.resultcode               # int
  #+END_SRC

* 时间处理
** 基本概念
   时间逻辑非常复杂，所以值得对重要的时间概念进行梳理。

   - 时区 :: 全球划分为24个时区，即同一时刻在不同时区下的“显示时间”不一样。
   - 当地时间 :: 说当地时间的时候，这个时间就需要带有时区信息。而笼统的说“时间”的时候，未必是包含有时区的。在对话语境里，其实时区是隐指当地时区。
   - utc时间 :: 国际最通用的时间，其“时区”是地球0度经线的上的时间。跨时区项目可以以此时间作为标准。例如，报表里的“每天”，是以UTC时间的来作为切分的。这样既可以保证全球的各地的用户看到的是同一个“每天”，也能免去不同时区的的用户为以谁的时区为标准而争论。然而，实际情况要复杂得多。例如，个人番茄时间报表，这种报表其实基本只是给用户自己看，当以他所在的时区为标准。但是如果这个用户经常飞来飞去，时区就可能变来变去，或者你可以要求用户自己设置一个时区。
   - 冬令时/夏令时 :: TODO 哪天做到再来补充，总是是个反人类的概念
   - timestamp :: Unix Timestamp，从UTC的1970年1月1日起经过的秒数，不包含闰秒。 
** datetime模块
** pytz模块
   
*** 一些简单的方法
   - 时区文本 :: 例如 =Asia/Shanghai=
   - 时区对象 :: pytz.timezone('Asia/Shanghai')

*** 获取某个时区下的某个时间
    例如：获取地球对面的“2022-10-21 11:23:34”
