#+TITLE: Programming Common

* about unit test
  这周给自己安排了写单元测试的任务，也写了几个。但是，翻了半途主代码，却不知道要测试什么了，貌似没有多少东西值的去测试。翻了一下Google，看到这篇[[https://coolshell.cn/articles/8209.html][“单元测试要做多细？”]]。感慨良多，我想起自己刚学习TDD的时候，一直想100%的覆盖单元测试。


* 时间

** 好的命名规范
   - 区分不同的“精度”:
     + year :: 只有年
     + year_month :: 只有年月，可以用缩写 =ym= 
     + date :: 只有年月日，其余部分时、分、秒、微秒、纳秒都是0
     + datetime :: 指年月日时分秒，其余部分时0。也可以用缩写 =dt=
     + time :: 一般指24小时制的时分秒，am/pm属于UI显示信息，一般不管。
   - 当地时间，就用 =local_{时间精度}= 来命名
   - 表示范围，就用 ={时间精度}_range= 来命名
   - 表示两个时间的差，就用 =delta_{时间单位}=。所谓时间单位就是years, months, days, hours, minutes等
   - 其它
     + ts :: timestamp的缩写
     + tz :: time zone的缩写


* 代码整洁
  个人认为，代码的整洁分为两阶段：
  1. 无需多加思考的历史经验阶段。一般是在设计之前或者正在写功能的阶段，这个时候大脑主要在思考功能的需求和实现的难点，代码能有多简洁，更多的时取决于下层的历史经验有多深厚，类似“肌肉记忆”无需多花心思就能自然而然的运用。如果你在这个阶段在代码简洁上用力过猛，可能会导致大脑资源超载，影响需求实现的思考。
  2. 功能实现完备后的清理阶段。这时候代码已经能跑起来，需求已经基本全部实现。这时候再去思考怎么把代码写简洁就没有什么心理压力。你可以安心的去思考怎么命名，怎么拆分，是否需要采用某些设计来应对将来的变化等等问题。这个阶段的实践会慢慢成有能在第一阶段使用的历史经验。

** 尽量保持功能单一

** 博客书籍
*** 博客：[[https://betterprogramming.pub/a-useful-framework-for-naming-your-classes-functions-and-variables-e7d186e3189f][A Useful Framework for Naming Your Classes, Functions, and Variables]]
    干货文章
