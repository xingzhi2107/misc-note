#+TITLE: K8S

* 一些基本概念
** k8s components
*** Cluster
一个k8s“实例”就是一个cluster（集群）。所谓集群就是k8s服务的一个集合，涉及nodes（节点）、control plane（控制中心）等资源。显然，这是云服务商所需要提供的一个服务，例如Amazon EKS，AliCloud ACk。当然在本地学习的时候，则可以通过kind或者k3s等工具来创建一个cluster。

**** 相关的命令
kube的配置文件默认位于 =~/.kube/config=，可以通过 ~KUBECONFIG~ 这个环境变量来指定配置文件的路径。这个变量类似 ~PATH~ ，通过 ~:~ 来分割多个路径。

执行 ~$ kubectl config view~ 可以查看配置内容。还有一系列更详细的命令：

#+begin_src bash
  kubectl config get-contexts     # 列出所有contexts
  kubectl config current-contexts # 查看当前的context
  kubectl config use-context <cluster-name> # 设置默认的context
  kubectl config set-cluster <cluster-name> # 这个命令我暂时不理解，它跟use-context有什么区别？
  kubectl cluster-info                      # 查看当前cluster的信息
#+end_src


更详细的内容，见[[https://kubernetes.io/docs/reference/kubectl/cheatsheet/#kubectl-context-and-configuration][Kubectl context and configuration]]。


*** Control Plane
控制平面。负责整个集群的控制。由很多个组件构成。k8s一般会单独分配一台机器来专门运行整个control plane.
   
*** Nodes
节点。表示一台抽象服务器，无论是物理机还是虚拟机。

一个节点可以运行多个pods。

每个节点都是受Control Plane的管理。每个节点上都运行着一个kubelet，用来跟Control Plane通讯。还运行着一个容器运行时服务，例如docker。

* logs命令
** 查看某个container的logs

#+begin_src shell
  kubectl logs [POD name] [-c CONTAINER name] [--follow] [flags]
#+end_src

  一般过程：
  1. 通过get pods命令，找到你要的pod name
  2. 通过describe pods命令，找到你的container name
  3. 执行上面的命令，来查看logs


* exec命令
** attach到某个container的shell上

#+begin_src shell
  kubectl exec -it <pod-name> -c <container-name> — bash
#+end_src

  一般过程：
  1. 通过get pods命令，找到你要的pod name
  2. 通过describe pods命令，找到你的container name
  3. 执行上面的命令，来attach到bash这个shell上


* 实践日志

** 2023-02-06 admindash访问新用户的profile页面挂掉

看了下日志，是redis报错 =TTL exhausted=：

#+begin_quote
  File "/usr/local/lib/python3.6/dist-packages/redis/client.py", line 1606, in get
    return self.execute_command('GET', name)
  File "/usr/local/lib/python3.6/dist-packages/rediscluster/client.py", line 551, in execute_command
    return self._execute_command(*args, **kwargs)
  File "/usr/local/lib/python3.6/dist-packages/rediscluster/client.py", line 706, in _execute_command
    raise ClusterError('TTL exhausted.')
rediscluster.exceptions.ClusterError: TTL exhausted.
#+end_quote

QA说，只有部分user id访问的时候才会有问题，按逻辑上下文来看，应该是新用户的id去访问，然后缓存不存在才会报错。

然后我用ipython去访问，却不会报错。所以没有继续深究，直接选择kill gunicron的工作进程让server重启就好了。

** 重启服务
  之前会ssh到容器里，然后手动kill worker process以达到重启服务的目的。实际上，用 =rollout restart= 命令会更好。

  #+begin_src bash
kubectl get deployments # 查看要重启的deployment的名字
kubectl rollout restart deployment <deployment-name>
#+end_src

  但是盲猜，这种方法相对比较粗暴，对于那些重要的线上服务，应该会有更精细的方案。

