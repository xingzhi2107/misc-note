#+TITLE: Reactjs

* 2018-03-27
  在redux中：state、reducer、action、api、container component之间有没有什么关系？能否根据文件夹类归。比如，在Todo那个example中，todo item相关的action、reducer、api都放到todo item的container component下？
  这里的问题在于，action、reducer会不会被别的“model”复用？比如被“footer”这个ui component调用？
  
  我有这种想法的原因是总感觉一些action、reducer、api、state只跟某个container component有关，但是却分散在不同的文件夹里。
  
  也许这是因为Todo这个example过于简单，所以感觉不出这样分的必要吧！

  
  几天没有学习reactjs，突然不知道从何入手？看开源项目？自己写东西？比较迷茫。

* 为什么api请求要放在DidMount里？
  参阅[[https://zhuanlan.zhihu.com/p/26027085][React Fiber]]。简单来讲，React16之后的componentWillMount可能被调用多次。


* React核心概念
  参考资料
  - [[https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html][Components vs Element vs Instance]]
    既然function component没有instance，那么所谓的Virtual DOM指的应该是element。

  - [[https://zhuanlan.zhihu.com/p/26027085][React Fiber]]

  - [[https://reactjs.org/docs/reconciliation.html][Diff过程(Reconciliation)]]

  - [[https://reactjs.org/docs/faq-internals.html][Virtual Dom]]
    Virtual DOM在React的实现里包含了element、fiber。

  - [[http://benweizhu.github.io/blog/2018/04/27/deep-thinking-in-react-8/][benweizhu]] 这个人的博客挺系统的

* hooks
** 2023-04-10 阅读[[https://zhuanlan.zhihu.com/p/455317250][不优雅的 React Hooks]]
  个人还是不喜欢hooks。我感觉一个组件，除非它真的非常简单，不然我还是喜欢用class component来实现。因为个人喜欢自上而下的去“逐层”写UI代码，但是实在不知道怎么在functional component里实现这种写法。
  今天又去看了hooks相关的东西，是因为能切实的感觉到react生态都在往hooks靠拢。例如，今天用react-router，这个库从最新的v6版本开始几乎所有的接口都要用hooks，这个实在让我有点崩溃。


* 实践：使用误区 -- 用状态变更来取代事件
  需求大概是这样的，一个list view里，会有video item，当video在屏幕露出75%的时候自动播放，否则关闭。只有list组件能监听到哪些item露出超过75%了。

  之前的实现：video item有一个isPlaying的props，又list维护受控。video item在componentDidUpdate里去监测isPlaying的前后变化，以此来决定是播放还是暂停video

  我认为这样的实现有如下坏处：
  1. 不直观
  2. 在componentDidUpdate里的监听逻辑实现起来比较麻烦，当状态变量变成多个的时候，实现起来更麻烦。


  我认为比较好的方案：
  1. video item里实现一个（或两个）handler，如：handleItemVisibleChanged，来承接video item的露出75%事件
  2. list view里维护view item的Refs，当露出75%时则调用对应的ref的handleItemVisibleChanged

  我觉得这种方案更加直观，语义明了。
