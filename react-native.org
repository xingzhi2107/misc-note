#+TITLE: React Native


* absolute与zIndex与elevation
  安卓平台下，elevation会影响z轴布局
  
  https://gongchenghuigch.github.io/2018/11/10/rnAndroidPosition/

* ScrollView总结 
** 滚动到某个元素的位置
   实现的思路：
   1. 获取目标元素T在scroll里的位置P
   2. 控制scroll滚动到P

   需要用到的API：
   measure [ˈmeʒə(r)] 系列API，用来测量T在scroll里的位置

** measure系列API

   measure系列API有三个，都是可以测量元素的尺寸和位置。这些接口在获取尺寸上没有，没有任何区别，所以这里只关注位置上的区别。
   
   | API             | 位置作用                          | 具体数值                                                |
   |-----------------+-----------------------------------+---------------------------------------------------------|
   | measure         | 测量元素在RN Page和在父元素的位置 | x, y表示在父元素的位置，pageX, pageY表示在RN Page的位置 |
   | measureInWindow | 测量元素在Native屏幕中的位置      | x, y表示在Native屏幕中的位置，即便元素已经超过屏幕范围  |
   | measureLayout   | 测量元素在某个父辈元素的位置      | left, top表示在这个父辈元素中的位置                     |

   RN Page与Native 屏幕有什么区别？举例说明：当一个RN Page嵌套在一个Native页面里的时候，比如，嵌套在一个Native页面的下半部，那么这时候用
   去测量RN 页面里最上面的一个元素的位置的时候：

   + measure 测量出来的pageX, pageY都会是0。虽然它的起始位置在整个屏幕的中间，但是它相对整个RN容器的位置就是0。
   + measureInWindow 测量出来的x=0，y则应该是屏高的一半。

   
** 兼容问题：ContentInset/ContentOffset
  这两个属性在Android下无效，见[[https://github.com/facebook/react-native/issues/30533#issuecomment-891373193][issue]]。可以使用 =contentContainerStyle= 这个属性来加padding，这样两个平台下就都是兼容的。
  
** flex: 1无效问题                                                  :chatgpt:
  跟我们自己写组件的时候，会有多个元素嵌套一样，ScrollView也是有的。按理：
  1. style需要给flex: 1，这样ScrollView会撑满剩余空间
  2. contentContainerStyle需要minHeight: 100%（如果也是flex: 1会导致无法滚动），这个是作用在ScrollView内部contentContainer元素的style，这样它就能撑满ScrollView的空间了。

** flex: 1无法滚动问题
  见[[*flex: 1无效问题][flex: 1无效问题]]

* 手势接口PanResponder
  之前写了一个轮播组件，但是轮播的内容元素的事件全被屏蔽了，翻找了一些资料之后，最后解决了。这篇[[https://juejin.cn/post/6844903434445914119][《React Native 触摸事件处理详解》]]写得非常好！

  简单总结一些RN的手势接口：
  - 一个手势是由一些列的touch、跟motion事件组成。从手指第一次touch开始，到手指离开结束
  - 元素首先通过 ~onXxxShouldSetPanResponder~ 接口来 =申请= 响应。Xxx可以是 =Start= 表示手势开始（touch），也可以是 =Move= 表示手势已经在进行中了（有时候Touch是在兄弟View开始的，然后Move进了当前View），后面不在解释Start跟Move。
  - 申请之后，onPanResponderGrant/onPanResponderReject 是申请的结果回调，表示成功或失败。
  - 如果申请成功，那么View就能通过回调onPanResponderMove被通知到手势的Move情况
  - 正常情况下，手势结束阶段会分别触发onPanResponderRelease与onPanResponderEnd两个回调，分别表示 =手势释放= 与 =手势结束=

** 无法想到触发场景的
  有些情况下，还会触发onResponderTerminationRequest跟onPanResponderRequestTerminal。

  按文档来说，是指当前View的正在响应当前的手势，这时另一个View也申请成为手势的响应者，则系统会调用onResponderTerminalRequest来询问当前View是否愿意放弃响应当前手势（因为一个手势，同时只能有一个响应者），如果同意就返回true，然后系统会调用onPanResponderRequestTerminal来通知当前View。
  
  但是，这个我怎么都没法触发！无论两个View的关系是父子关系、还是兄弟关系、还是叔侄关系，都没办法触发Request。这个留待未来解答吧！
** 误区一：事件可以继续往后传递
  以前写web，处理web事件的时候可以调用 ~event.stopPropagation()~ 来阻止事件继续传播。但是手势事件里，貌似没有决定要不要继续传播的接口。
  现在想想这种接口肯定是没有的。因为手势事件其实是一个系列的事件，你不能已经响应了n个事件后才决定放弃响应，然后想把响应权交给其它元素。

  当然，根据后来瞄了一眼ios的事件机制的文章来讲，这可能只是RN没封装而已，实际上ios可能是支持的。

** 大一统的“捕获冒泡”事件传播机制
  总体而言，无论是桌面操作系统、Web、iOS还是Android，其大部分事件类型的传播机制都符合“捕获冒泡”的转播方式。可以重温下[[file:javascript.org::*DOM事件模型][DOM事件模型]]  

  不过这里有一个注意点要特别注意，这个传播路径差不多（ios貌似可以重写这个路径）是 =目标元素= 所在的渲染树路径！它不会沿着兄弟结点、叔侄结点进行传播。

** 现实例子：如何解决上述的轮播组件问题？
  我一开始寻求一种事件往后传递的方案来解决这个问题。因为我以为是轮播图组件把内容元素的事件拦截了，但这其实一开始思路就错误了。

  经过重温事件相关的知识之后，我重新回望轮播图组件的实现方式，最终发现了症结所在。这里先描述一下组件的渲染结构：

  - 设轮播的内容元素中的那个Button为 =target el=，因为touch事件是作用在它上面的；
  - 每一页轮播图都有一个wrapper元素，就设为 =wrapper el=。可见 =target el= 跟 =wrapper el=是祖孙关系，属于“直系亲属”；
  - 当时，还有一个mask元素，用来承载响应用户手势，从而让用户手动控制轮播进度，设为 =mask el=。显然，=mask el= 与其它两个元素都没有直系亲属关系。

  以上就是描述这个问题的主要结构，其它一些元素不是很重要，不多描述。

  问题的症结在于那个 =mask el= ，它承载了响应用户手势，Z-index层面又在其它元素之上，但跟轮播的内容又不是直系亲属关系。请问，即便有所谓的“继续传递”机制，又有什么用？ =target el= 的事件既不是被拦截、也不是被屏蔽！是压根就没发生在它身上！

  解决方案也很简单：
  - 移除 =mask el= ，把手势响应放在 =wrapper el= 上，这样用户在点击 =target el= 的时候，事件就真的发生在它身上；
  - 移除onStartShouldSetPanResponderCapture跟onMoveShouldSetPanResponderCapture，不要在捕获阶段去响应手势。当时这两个属性多半是一股脑全写上去的。
  
** 未解答的疑惑？
  - ios 15开始支持的popup窗口，是可以下拉关闭的。那么ios是如何做到让窗口、与轮播图这两个View都能响应同一个手势的呢？准备的说是，在一个手势周期内，上下滑动的时候，窗口会屏蔽轮播图响应。


* Animated.View
** 兼容问题：Android平台下，Animated.View里的Touch组件无法响应。
  见[[https://github.com/facebook/react-native/issues/28263#issuecomment-885364614][issue]]。

* 兼容性问题汇总
** Touch组件无法响应
  - [[*兼容问题：Android平台下，Animated.View里的Touch组件无法响应。][兼容问题：Android平台下，Animated.View里的Touch组件无法响应。]]
* 对React Navigation库的看法
  [[https://reactnavigation.org/][React Navigation]]这个库应该是RN下比较流行的路由跟导航栏库了，功能比较丰富。但是还是用不太来：

  - 太重。这个当然也是优点，但是像我不想使用它的导航栏功能，就没办法单独使用。
  - 跟在web的路由体验不太一样。它用name而不是path作为路由标识。另外，web习惯把参数放在url的search里，但是这个库是另外再传props的。
  - 太散。散的意思是说，一个页面的逻辑溢出到页面组件之外。我认为，title、actions这些应该放在页面组件的内部去处理，而不是在路由注册的地方去处理一堆title等逻辑。

* 2023-04-12 Glow Baby性能问题调试
  今天调试了一个性能问题，弄了一下午，感觉走了一些弯路。这里记录一下。

  现象：RN的页面会非常的卡，能感觉到很明显的掉帧。但是过一会貌似就好了。

  初步怀疑：
  + 这个用户的数据量太大（关注的Group太多），导致一开始渲染太多，或者数据吃了太多内存；
  
