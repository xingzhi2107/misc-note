#+TITLE: Mysql


* change primary key
  1. =ALTER TABLE tbl DROP PRIMARY KEY=
  2. =ALTER TABLE tbl MODIFY fid ... PRIMARY KEY=


* formate timestamp to date
  https://stackoverflow.com/a/12629932
  #+begin_src mysql
  SELECT
  DATE_FORMATE(FROM_UNIXTIME(time_created)) AS time_created_date
  FROM Table1
  #+end_src

* mysql cross db join
  mysql跨db join表，只需要给table加上db的前缀就可以了


* 分析select性能
  在select前面加上explain就可以看到很多性能信息。

* 索引的作用
  索引的作用当然是加快query的速度。索引在where、order by都能起到作用。

* 临时表
  由于开发的功能还未上线，所以数据仓库也没有新功能新增的表及其数据。现在需要对数据做一些简单的统计，但是因为数据分库这个过程变得繁琐无比。临时表能一定程度上化解这种繁琐。

  大致过程是：
  1. 创建表
  2. 插入数据
  3. 清理临时表

  创建跟清理表，其实用CREATE TABLE跟DROP TABLE就行了，这里不多介绍。插入数据需要用到INSERT INTO ... SELECT语句，如：
  #+begin_src mysql
  INSERT INTO TmpTable1 SELECT name, age FROM student LIMIT 10;
  #+end_src

** 真正的的临时表
   mysql还提供一种真正的临时表，在session结束后会自动清理。其语法也很简单，就是把=CREATE TABLE=语句换成=CREATE TEMPORARY TABLE=，如：
   #+name: 创建临时表1 -- 基本用法
   #+begin_src mysql
   CREATE TEMPORARY TABLE TmpTable1 (
     `age` INT(8) UNSIGNED NOT NULL,
     `name` VARCHAR(255) NOT NULL,
   )
   #+end_src

   因为是临时表，基本都没什么讲究，什么主键、外键、索引基本都不需要。所以，mysql还提供一种快速建表的方式，直接通过select的结果自动建表同时导入select的结果，如：
   #+name: 创建临时表 -- 通过select结果自动建表并插入数据
   #+begin_src mysql
   CREATE TEMPORARY TABLE TmpTable1 SELECT age, name FROM student LIMIT 10;
   #+end_src
   
* having与group by的使用
  平时不太需要用到sql，用到了也是简单的select/join，很久才会用一两次having与group by。这就让我很苦恼，每次用到的时候都生分了，又要查一下example。
  今天特意开此section，用来记录一些基本知识点与写过的sql作为example，方便下一次生分的时候查阅回忆。

  [[https://www.mysqltutorial.org/mysql-having.aspx][这篇教程]]应该是最完整的。以此，简单做些笔记。

  注意点：
  1. where跟having的相同点、不同点
  2. 它们的执行顺序是什么？
  3. group by的作用是什么？

  明白了这些点，就够了。

  #+begin_src mysql
SELECT 
    select_list
FROM 
    table_name
WHERE 
    search_condition
GROUP BY 
    group_by_expression
HAVING 
    group_condition;
  #+end_src

  简单来讲，一句带有group by/having的简单query sql，有如下过程：
  1. From :: 从表里取出原始数据
  2. Where :: 通过Where的条件过滤原始数据
  3. Group by :: 根据group by的表达式，对原始数据进行group聚合
  4. Having :: 对聚合后的数据，再根据Having的条件进行过滤。这是第二次过滤，是对聚合后的数据的过滤。
  5. Order by/Limit :: 最后再对数据进行排序分页。

* 案例
** 每个group最xx的数据
   [[https://stackoverflow.com/questions/8748986/get-records-with-highest-smallest-whatever-per-group/8749095#8749095][Get records with highest/smallest <whatever> per group]]
   这篇文章让我对join陷入了沉思，值得再学习join。不过出于可阅读性考虑，我还是分别取出用户信息、怀孕信息，然后用代码在内存里判断每个用户是否是近期流产的用户。

   --------------------------- 2022-01-04 06:33:10 ---------------------------
   因为需要，所以今天又探索了一番。我感觉[[https://stackoverflow.com/questions/2739474/how-to-select-the-first-row-for-each-group-in-mysql#answer-2739528][这个回答]]的方法最好理解。简单描述：
     1. 先通过group的函数（基本是min或者max）找到每个group的目标id
     2. 再通过步骤1.获取的ids来获取最终想要的结果。
        
   案例分析：要获取每个用户最近一单订单的订单状态。对应的SQL是这样写的：
   #+begin_src mysql
   SELECT user_id, status, orderDate FROM orders WHERE id IN (
      SELECT max(id) FROM orders GROUP BY user_id
   );
   #+end_src

   这里其实有一个很重要的前提，那就是id要能比较大小，并且大id的创建时间比小id的新。


   
   
* 坑：插入截断不会报错
  如果没有开启 =STRICT_TRANS_TABLES= mode，插入的值过长会默默地被截断，不报错。可以在配置文件my.cnf的[mysqld] section下配置要开启的mode：
#+begin_src 
[mysqld]
sql-mode="STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION"
#+end_src

  据说mysql是默认关闭这个mode，可能是为了向后兼容的缘故。无论如何，这个选项最好显示的打开！我感觉默默截断是非常非常危险的！在开发阶段还未必能发现问题，上线之后才丢数据就很恶心。

  
  
